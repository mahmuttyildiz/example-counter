{"version":3,"sources":["App.js","Redux/action.js","Redux/types.js","serviceWorker.js","Redux/reducer.js","Redux/store.js","index.js"],"names":["App","this","props","count","incrementValue","decrementValue","onClick","React","Component","mapDispatchToProps","type","connect","state","Boolean","window","location","hostname","match","initialState","reducer","action","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAKMA,E,uKAEK,IAAD,EAC4CC,KAAKC,MAA9CC,EADH,EACGA,MAAOC,EADV,EACUA,eAAgBC,EAD1B,EAC0BA,eAC9B,OAAO,6BACH,4BAAKF,GACL,4BAAQG,QAASD,GAAjB,KAGA,4BAAQC,QAASF,GAAjB,U,GATQG,IAAMC,WAiBlBC,EAAqB,CACrBL,eCrBwB,iBAAO,CACjCM,KCHqB,cFwBnBL,eClBwB,iBAAO,CACjCK,KCNqB,eF2BVC,eAPS,SAACC,GAAW,OAAOA,IAOHH,EAAzBE,CAA6CX,GGhBxCa,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCfN,IAAMC,EAAe,CACjBf,MAAO,GAiBIgB,EAdC,WAAmC,IAAlCP,EAAiC,uDAAzBM,EAAcE,EAAW,uCAC9C,OAAQA,EAAOV,MACX,IFTiB,YEUjB,MAAO,CACHP,MAAOS,EAAMT,MAAQ,GAEzB,IFZiB,YEab,MAAO,CACHA,MAAOS,EAAMT,MAAQ,GAE7B,QAAS,OAAOS,I,OCbXS,EAAQC,YAAYH,GCIjCI,IAASC,OACP,kBAAC,IAAD,CAAUH,MAAOA,GACf,kBAAC,EAAD,OAGFI,SAASC,eAAe,SHsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6175eb78.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport {connect} from 'react-redux';\nimport {incrementValue, decrementValue} from './Redux/action.js';\n\nclass App extends React.Component{\n\n  render(){\n      const {count, incrementValue, decrementValue} = this.props;\n      return <div>\n          <h1>{count}</h1>\n          <button onClick={decrementValue}>\n              -\n          </button>\n          <button onClick={incrementValue}>\n              +\n          </button>\n      </div>\n      \n    }\n}\nconst mapStateToProps = (state) => {return state};\nconst mapDispatchToProps = {\n      incrementValue,\n      decrementValue,\n};\n\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import {INCREMENT, DECREMENT} from './types';\n\nexport const incrementValue = () => ({\n    type: INCREMENT,\n});\n\nexport const decrementValue = () => ({\n    type: DECREMENT,\n});\n\n","export const INCREMENT = 'INCREMENT';\nexport const DECREMENT = 'DECREMENT';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\nimport {INCREMENT, DECREMENT} from './types';\n\nconst initialState = {\n    count: 0\n};\n\nconst reducer = (state = initialState, action) => {\n    switch (action.type) {\n        case INCREMENT:\n        return {\n            count: state.count + 1\n        }\n        case DECREMENT:\n            return {\n                count: state.count - 1\n            }\n        default: return state;\n    }\n}\n\nexport default reducer;","import reducer from './reducer';\nimport {createStore} from 'redux';\n\n\nexport const store = createStore(reducer);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from 'react-redux';\nimport {store} from \"./Redux/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>\n  ,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}